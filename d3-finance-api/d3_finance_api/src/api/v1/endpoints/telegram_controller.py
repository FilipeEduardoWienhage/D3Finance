from typing import Annotated, Optional
from fastapi import HTTPException, Depends, status, Response, APIRouter
from sqlalchemy.orm import Session
from sqlalchemy.exc import IntegrityError
from src.app import router
from src.database.database import SessionLocal
from src.database.models import TelegramConfig, Usuario
from src.api.tags import Tag
from src.schemas.telegram_schemas import (
    TelegramConfigCreate, 
    TelegramConfigResponse, 
    TelegramConfigUpdate,
    TelegramTestMessage,
    TelegramNotificationResponse
)
from src.services.autenticacao_service import get_current_user
from src.schemas.autenticacao_schemas import TokenData
from src.services.telegram_service import telegram_service
from datetime import datetime
import logging

logger = logging.getLogger(__name__)

router = APIRouter()

# Endpoints
CONFIG_TELEGRAM = "/v1/telegram/config"
TEST_TELEGRAM = "/v1/telegram/test"
GET_CONFIG_TELEGRAM = "/v1/telegram/config"
UPDATE_CONFIG_TELEGRAM = "/v1/telegram/config"
DELETE_CONFIG_TELEGRAM = "/v1/telegram/config"


def get_db():
    db = SessionLocal()
    try:
        yield db
    finally:
        db.close()


@router.post(
    path=CONFIG_TELEGRAM, 
    response_model=TelegramConfigResponse, 
    tags=[Tag.Telegram.name]
)
def create_telegram_config(
    config: TelegramConfigCreate, 
    usuario_logado: Annotated[TokenData, Depends(get_current_user)], 
    db: Session = Depends(get_db)
):
    """
    Configura a integra√ß√£o com Telegram para o usu√°rio
    """
    try:
        # Verifica se j√° existe configura√ß√£o para o usu√°rio
        existing_config = db.query(TelegramConfig).filter(
            TelegramConfig.usuario_id == usuario_logado.id
        ).first()
        
        if existing_config:
            raise HTTPException(
                status_code=status.HTTP_400_BAD_REQUEST,
                detail="Usu√°rio j√° possui configura√ß√£o do Telegram. Use PUT para atualizar."
            )
        
        # Cria nova configura√ß√£o
        db_config = TelegramConfig(
            usuario_id=usuario_logado.id,
            chat_id=config.chat_id,
            ativo=True
        )
        
        db.add(db_config)
        db.commit()
        db.refresh(db_config)
        
        return TelegramConfigResponse(
            id=db_config.id,
            usuario_id=db_config.usuario_id,
            chat_id=db_config.chat_id,
            ativo=db_config.ativo,
            data_criacao=db_config.data_criacao,
            data_alteracao=db_config.data_alteracao
        )
        
    except IntegrityError as e:
        db.rollback()
        raise HTTPException(
            status_code=status.HTTP_400_BAD_REQUEST,
            detail="Erro ao configurar Telegram. Verifique os dados fornecidos."
        )
    except Exception as e:
        db.rollback()
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail="Erro interno do servidor"
        )


@router.get(
    path=GET_CONFIG_TELEGRAM, 
    response_model=TelegramConfigResponse, 
    tags=[Tag.Telegram.name]
)
def get_telegram_config(
    usuario_logado: Annotated[TokenData, Depends(get_current_user)], 
    db: Session = Depends(get_db)
):
    """
    Obt√©m a configura√ß√£o atual do Telegram do usu√°rio
    """
    config = db.query(TelegramConfig).filter(
        TelegramConfig.usuario_id == usuario_logado.id
    ).first()
    
    if not config:
        raise HTTPException(
            status_code=status.HTTP_404_NOT_FOUND,
            detail="Configura√ß√£o do Telegram n√£o encontrada"
        )
    
    return TelegramConfigResponse(
        id=config.id,
        usuario_id=config.usuario_id,
        chat_id=config.chat_id,
        ativo=config.ativo,
        data_criacao=config.data_criacao,
        data_alteracao=config.data_alteracao
    )


@router.put(
    path=UPDATE_CONFIG_TELEGRAM, 
    response_model=TelegramConfigResponse, 
    tags=[Tag.Telegram.name]
)
def update_telegram_config(
    config_update: TelegramConfigUpdate, 
    usuario_logado: Annotated[TokenData, Depends(get_current_user)], 
    db: Session = Depends(get_db)
):
    """
    Atualiza a configura√ß√£o do Telegram do usu√°rio
    """
    config = db.query(TelegramConfig).filter(
        TelegramConfig.usuario_id == usuario_logado.id
    ).first()
    
    if not config:
        raise HTTPException(
            status_code=status.HTTP_404_NOT_FOUND,
            detail="Configura√ß√£o do Telegram n√£o encontrada"
        )
    
    try:
        # Atualiza os campos fornecidos
        if config_update.chat_id is not None:
            config.chat_id = config_update.chat_id
        if config_update.ativo is not None:
            config.ativo = config_update.ativo
            
        db.commit()
        db.refresh(config)
        
        return TelegramConfigResponse(
            id=config.id,
            usuario_id=config.usuario_id,
            chat_id=config.chat_id,
            ativo=config.ativo,
            data_criacao=config.data_criacao,
            data_alteracao=config.data_alteracao
        )
        
    except Exception as e:
        db.rollback()
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail="Erro interno do servidor"
        )


@router.delete(
    path=DELETE_CONFIG_TELEGRAM, 
    tags=[Tag.Telegram.name]
)
def delete_telegram_config(
    usuario_logado: Annotated[TokenData, Depends(get_current_user)], 
    db: Session = Depends(get_db)
):
    """
    Remove a configura√ß√£o do Telegram do usu√°rio
    """
    config = db.query(TelegramConfig).filter(
        TelegramConfig.usuario_id == usuario_logado.id
    ).first()
    
    if not config:
        raise HTTPException(
            status_code=status.HTTP_404_NOT_FOUND,
            detail="Configura√ß√£o do Telegram n√£o encontrada"
        )
    
    try:
        db.delete(config)
        db.commit()
        
        return {"message": "Configura√ß√£o do Telegram removida com sucesso"}
        
    except Exception as e:
        db.rollback()
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail="Erro interno do servidor"
        )


@router.post(
    path=TEST_TELEGRAM, 
    response_model=TelegramNotificationResponse, 
    tags=[Tag.Telegram.name]
)
def test_telegram_notification(
    test_message: TelegramTestMessage,
    usuario_logado: Annotated[TokenData, Depends(get_current_user)], 
    db: Session = Depends(get_db)
):
    """
    Envia uma mensagem de teste via Telegram
    """
    config = db.query(TelegramConfig).filter(
        TelegramConfig.usuario_id == usuario_logado.id,
        TelegramConfig.ativo == True
    ).first()
    
    if not config:
        raise HTTPException(
            status_code=status.HTTP_404_NOT_FOUND,
            detail="Configura√ß√£o ativa do Telegram n√£o encontrada"
        )
    
    try:
        # Formata mensagem de teste
        message = f"""
üß™ <b>TESTE DE NOTIFICA√á√ÉO</b>

<b>Mensagem:</b> {test_message.message}
<b>Data/Hora:</b> {datetime.now().strftime('%d/%m/%Y %H:%M:%S')}

‚úÖ Se voc√™ recebeu esta mensagem, a integra√ß√£o est√° funcionando corretamente!
"""
        
        # Envia mensagem de teste
        success = telegram_service.send_message(
            config.chat_id, 
            message.strip()
        )
        
        if success:
            return TelegramNotificationResponse(
                success=True,
                message="Mensagem de teste enviada com sucesso",
                sent_at=datetime.now()
            )
        else:
            return TelegramNotificationResponse(
                success=False,
                message="Falha ao enviar mensagem de teste",
                sent_at=datetime.now()
            )
            
    except Exception as e:
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail=f"Erro ao enviar mensagem de teste: {str(e)}"
        )


@router.post("/config", response_model=TelegramConfigResponse)
def configurar_telegram(
    config: TelegramConfigCreate,
    current_user: Usuario = Depends(get_current_user),
    db: Session = Depends(get_db)
):
    """
    Configura o Telegram para um usu√°rio
    """
    try:
        # Verifica se j√° existe configura√ß√£o
        existing_config = db.query(TelegramConfig).filter(
            TelegramConfig.usuario_id == current_user.id
        ).first()
        
        if existing_config:
            # Atualiza configura√ß√£o existente
            existing_config.chat_id = config.chat_id
            existing_config.ativo = config.ativo
            db.commit()
            db.refresh(existing_config)
            
            logger.info(f"Configura√ß√£o do Telegram atualizada para usu√°rio {current_user.id}")
            return TelegramConfigResponse(
                id=existing_config.id,
                usuario_id=existing_config.usuario_id,
                chat_id=existing_config.chat_id,
                ativo=existing_config.ativo,
                data_criacao=existing_config.data_criacao,
                data_atualizacao=existing_config.data_atualizacao
            )
        else:
            # Cria nova configura√ß√£o
            new_config = TelegramConfig(
                usuario_id=current_user.id,
                chat_id=config.chat_id,
                ativo=config.ativo
            )
            db.add(new_config)
            db.commit()
            db.refresh(new_config)
            
            logger.info(f"Nova configura√ß√£o do Telegram criada para usu√°rio {current_user.id}")
            return TelegramConfigResponse(
                id=new_config.id,
                usuario_id=new_config.usuario_id,
                chat_id=new_config.chat_id,
                ativo=new_config.ativo,
                data_criacao=new_config.data_criacao,
                data_atualizacao=new_config.data_atualizacao
            )
            
    except Exception as e:
        logger.error(f"Erro ao configurar Telegram: {str(e)}")
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail="Erro interno do servidor"
        )


@router.get("/config", response_model=Optional[TelegramConfigResponse])
def obter_configuracao_telegram(
    current_user: Usuario = Depends(get_current_user),
    db: Session = Depends(get_db)
):
    """
    Obt√©m a configura√ß√£o do Telegram do usu√°rio
    """
    try:
        config = db.query(TelegramConfig).filter(
            TelegramConfig.usuario_id == current_user.id
        ).first()
        
        if config:
            return TelegramConfigResponse(
                id=config.id,
                usuario_id=config.usuario_id,
                chat_id=config.chat_id,
                ativo=config.ativo,
                data_criacao=config.data_criacao,
                data_atualizacao=config.data_atualizacao
            )
        else:
            return None
            
    except Exception as e:
        logger.error(f"Erro ao obter configura√ß√£o do Telegram: {str(e)}")
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail="Erro interno do servidor"
        )


@router.post("/test")
def enviar_mensagem_teste(
    test_message: TelegramTestMessage,
    current_user: Usuario = Depends(get_current_user),
    db: Session = Depends(get_db)
):
    """
    Envia uma mensagem de teste para o Chat ID configurado
    """
    try:
        # Busca configura√ß√£o do usu√°rio
        config = db.query(TelegramConfig).filter(
            TelegramConfig.usuario_id == current_user.id
        ).first()
        
        if not config:
            raise HTTPException(
                status_code=status.HTTP_404_NOT_FOUND,
                detail="Configura√ß√£o do Telegram n√£o encontrada"
            )
        
        # Envia mensagem de teste
        message = f"""
ü§ñ <b>MENSAGEM DE TESTE</b>

Ol√° {current_user.name}!

Esta √© uma mensagem de teste do D3 Finance.
Se voc√™ est√° recebendo esta mensagem, significa que sua configura√ß√£o do Telegram est√° funcionando corretamente!

<b>Chat ID:</b> {config.chat_id}
<b>Status:</b> {'‚úÖ Ativo' if config.ativo else '‚ùå Inativo'}
"""
        
        success = telegram_service.send_message(config.chat_id, message)
        
        if success:
            return {"message": "Mensagem de teste enviada com sucesso!"}
        else:
            raise HTTPException(
                status_code=status.HTTP_400_BAD_REQUEST,
                detail="Erro ao enviar mensagem de teste. Verifique se o Chat ID est√° correto."
            )
            
    except HTTPException:
        raise
    except Exception as e:
        logger.error(f"Erro ao enviar mensagem de teste: {str(e)}")
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail="Erro interno do servidor"
        )


@router.delete("/config")
def remover_configuracao_telegram(
    current_user: Usuario = Depends(get_current_user),
    db: Session = Depends(get_db)
):
    """
    Remove a configura√ß√£o do Telegram do usu√°rio
    """
    try:
        config = db.query(TelegramConfig).filter(
            TelegramConfig.usuario_id == current_user.id
        ).first()
        
        if not config:
            raise HTTPException(
                status_code=status.HTTP_404_NOT_FOUND,
                detail="Configura√ß√£o do Telegram n√£o encontrada"
            )
        
        db.delete(config)
        db.commit()
        
        logger.info(f"Configura√ß√£o do Telegram removida para usu√°rio {current_user.id}")
        return {"message": "Configura√ß√£o do Telegram removida com sucesso!"}
        
    except HTTPException:
        raise
    except Exception as e:
        logger.error(f"Erro ao remover configura√ß√£o do Telegram: {str(e)}")
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail="Erro interno do servidor"
        )